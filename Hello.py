import streamlit as st
from streamlit.logger import get_logger
import pandas as pd
import folium
from streamlit_folium import folium_static
from geopy.distance import geodesic
import seaborn as sns
from streamlit_extras.metric_cards import style_metric_cards
import streamlit.components.v1 as components

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
st.set_page_config(layout='wide')

LOGGER = get_logger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV
@st.cache_data
def load_data():
    data = pd.read_csv('test_flats_data.csv')
    return data

data = load_data()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title('üìä –ê–Ω–∞–ª–∏–∑ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏')

# –°–∞–π–¥–±–∞—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã
st.sidebar.header('–§–∏–ª—å—Ç—Ä—ã')


selected_city = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥', data['city'].unique())
filtered_data = data[data['city'] == selected_city]
selected_flat_id = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É', filtered_data['id'])

# –î–æ–ø—É—â–µ–Ω–∏—è
refresh_cost_sq = st.sidebar.number_input('–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä:', 35000)
agent_commission = st.sidebar.number_input('–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–º–∏—Å—Å–∏–∏ –∞–≥–µ–Ω—Ç–∞:', 100000)

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ
selected_flat = filtered_data[filtered_data['id'] == selected_flat_id].squeeze()
st.header(f"{selected_flat['city']}, {selected_flat['street']}, {selected_flat['address']}")

# –†–∞—Å—á–µ—Ç –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ä–µ–º–æ–Ω—Ç –∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
refresh_cost = selected_flat['area'] * refresh_cost_sq
expected_sale_price = selected_flat['predicted_price']
total_expenses = selected_flat['price_sq'] + refresh_cost + agent_commission
profit = expected_sale_price - total_expenses

# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –∏ –∑–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫–∏ –Ω–∞ –∑–∞–ø—è—Ç—ã–µ
price_in = f'{selected_flat["bargainTerms.price"]:,}'.replace(",", " ").replace(".", ",") + " —Ä—É–±."
price_out = f'{(expected_sale_price * selected_flat["area"]):,}'.replace(",", " ").replace(".", ",") + " —Ä—É–±."
profit_display = f'{profit:,}'.replace(",", " ").replace(".", ",") + " —Ä—É–±."

# –û—Ç—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
st.subheader('–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏')
col1, col2, col3,col4 = st.columns(4)
col1.metric("üí∞ **–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:**", price_in)
col2.metric("üí∏ **–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞:**", price_out)
col3.metric("üí∏ **–ü—Ä–∏–±—ã–ª—å:**", profit_display)
col4.metric("üìä **–¢—Ä–µ–Ω–¥ —Ä—ã–Ω–∫–∞**", "4%", "100%")
# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
col1, col2, col3 = st.columns(3)
col1.metric("üîÑ **ROI**", "20%", "4%")
col2.metric("üöå **–ò–Ω–¥–µ–∫—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏**", "5", "10")
col3.metric("üìç **–ò–Ω–¥–µ–∫—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã**", "6", "10")

style_metric_cards()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã
st.subheader('–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã')
st.write(f"*–ö–æ–º–Ω–∞—Ç:* ***{selected_flat['rooms']}***")
st.write(f"*–≠—Ç–∞–∂:* ***{selected_flat['floor']} –∏–∑ {selected_flat['house_floors']}***")
st.write(f"*–ü–ª–æ—â–∞–¥—å:* ***{selected_flat['area']} –º¬≤***")
st.write(f"*–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å:* ***{selected_flat['all_data.livingArea']} –º¬≤***")
st.write(f"*–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏:* ***{selected_flat['kitchen_area']} –º¬≤***")
st.write(f"*–°–∞–Ω—É–∑–µ–ª:* ***{selected_flat['bathroom_type']}***")
st.write(f"*–õ–∏—Ñ—Ç:* ***–ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π {selected_flat['lifts']} –≥—Ä—É–∑–æ–≤–æ–π {selected_flat['freight_lifts']}***")
st.write(f"*–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–º–∞:* ***{selected_flat['house_wall_type']}***")
st.write(f"*–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:* ***{selected_flat['build_year']}***")

# –ê–Ω–∞–ª–∏–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
st.subheader('–ê–Ω–∞–ª–∏–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏')

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 1500 –º–µ—Ç—Ä–æ–≤
st.markdown("---")
tab1, tab2 = st.tabs(["–ö–∞—Ä—Ç–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", "–¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"])

competes_data = filtered_data.copy()
competes_data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–º–µ—Ç—Ä—ã)'] = competes_data.apply(
    lambda row: geodesic((row['lat'], row['lon']), (selected_flat['lat'], selected_flat['lon'])).meters,
    axis=1
)
competes_data = competes_data[competes_data['–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–º–µ—Ç—Ä—ã)'] <= 1500]
competes_data.loc[competes_data['id'] == selected_flat_id, '–í—ã–±—Ä–∞–Ω–æ'] = "–í—ã–±—Ä–∞–Ω–Ω—ã–µ"
competes_data['–†–∞–∑–Ω–∏—Ü–∞ –≤ —Ü–µ–Ω–µ'] = competes_data['price_sq'] - selected_flat['price_sq']

with tab2:
    st.subheader('–¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤')
    st.dataframe(competes_data[[
        'city', 'street', 'address', 'rooms', 'area', 'kitchen_area', 'renovation', 'floor', 'house_floors', 
        'house_wall_type', 'build_year', 'time_on_foot_to_subway', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–º–µ—Ç—Ä—ã)', 'price_sq', 
        'bargainTerms.price', '–†–∞–∑–Ω–∏—Ü–∞ –≤ —Ü–µ–Ω–µ', '–í—ã–±—Ä–∞–Ω–æ'
    ]].reset_index(drop=True))

with tab1:
    st.subheader('–ö–∞—Ä—Ç–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤')
    m = folium.Map(location=[selected_flat['lat'], selected_flat['lon']], zoom_start=14)
    for index, flat in competes_data.iterrows():
        marker_color = 'red' if flat['id'] == selected_flat_id else 'blue'
        folium.Marker([flat['lat'], flat['lon']],
                      popup=f"{flat['city']}, {flat['price_sq']} —Ä—É–±/–º¬≤",
                      tooltip=f"{flat['city']}, {flat['price_sq']} —Ä—É–±/–º¬≤",
                      icon=folium.Icon(color=marker_color)).add_to(m)
    folium_static(m, width=1000, height=600)

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞–º–∏
st.subheader('–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞')
YOUR_APIKEY = "14a66a7c-9302-4fbb-9102-44edd5c98dc2"
location_yandex_map = [selected_flat['lat'], selected_flat['lon']]

yandex_map_html = f"""
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1" />
<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap" rel="stylesheet">
<script src="https://api-maps.yandex.ru/2.1/?apikey={YOUR_APIKEY}&lang=ru_RU" type="text/javascript"></script>
<style>
html, body, #app {{ width: 100%; height: 100%; margin: 0; padding: 0; font-family: Arial, Helvetica, sans-serif; }}
</style>
</head>
<body>
<div id="app" style="width: 100%; height: 600px;"></div>
<script>
ymaps.ready(init);
function init() {{
    var map = new ymaps.Map('app', {{ center: {location_yandex_map}, zoom: 13 }});
    var selectedMarker = new ymaps.Placemark([{location_yandex_map[0]}, {location_yandex_map[1]}], {{
        balloonContent: '<strong>–í—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç</strong><br/>–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–≤.–º.: {selected_flat["price_sq"]} —Ä—É–±',
        iconColor: 'red'
    }});
    map.geoObjects.add(selectedMarker);
    var competesData = {competes_data[['lat', 'lon', 'id', 'price_sq']].to_json(orient='records', date_format='iso')};
    for (var i = 0; i < competesData.length; i++) {{
        var competitorMarker = new ymaps.Placemark(
            [competesData[i]['lat'], competesData[i]['lon']],
            {{
                balloonContent: '<strong>Competitor Property</strong><br/>Cost per sq.m.: ' + competesData[i]['price_sq'] + ' rub'
            }}
        );
        map.geoObjects.add(competitorMarker);
    }}
}}
</script>
</body>
</html>
"""

components.html(yandex_map_html, height=600)


st.markdown(
    """
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap');
    * {
        font-family: 'Montserrat', sans-serif;
    }
    </style>
    """,
    unsafe_allow_html=True,
)
