# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import streamlit as st
from streamlit.logger import get_logger
import pandas as pd
import folium
from streamlit_folium import folium_static
from streamlit_folium import st_folium
from geopy.distance import geodesic
import matplotlib.pyplot as plt
import seaborn as sns
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
st.set_page_config(layout='wide')
LOGGER = get_logger(__name__)
# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV___
@st.cache
def load_data():
    data = pd.read_csv('test_flats_data.csv')  # –ó–∞–º–µ–Ω–∏—Ç–µ 'your_data.csv' –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ CSV
    return data
data = load_data()
print(data.columns)
# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.subheader('–†–∞—Å—á–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞')

# –°–∞–π–¥–±–∞—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
selected_city = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥', data['city'].unique())

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É
filtered_data = data[data['city'] == selected_city]

# –°–∞–π–¥–±–∞—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
selected_flat_id = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É', filtered_data['id'])

# –î–æ–ø—É—â–µ–Ω–∏—è
renovation_cost_sq = st.sidebar.number_input('–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä:', 35000 )
# –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –∞–≥–µ–Ω—Ç–∞
agent_commission = st.sidebar.number_input('–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–º–∏—Å—Å–∏–∏ –∞–≥–µ–Ω—Ç–∞:', 100000 )

# –í—ã–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –∏ —Ä–∞–π–æ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã
selected_flat = data[data['id'] == selected_flat_id].squeeze()
st.write(f'{selected_flat["city"]}')
üè† st.title(f'{selected_flat["street"]}, {selected_flat["address"]}')
#{selected_flat["floor"]} –∫–æ–º.–∫–≤., {selected_flat["city"]}, –ü–ª–æ—â–∞–¥—å: {selected_flat["area"]}
st.write(f'–ú–µ—Ç—Ä–æ: {selected_flat["all_data.geo.undergrounds[0].name"]}, {selected_flat["all_data.geo.undergrounds[0].time"]} –º–∏–Ω.')

# –†–∞—Å—á–µ—Ç –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ä–µ–º–æ–Ω—Ç
renovation_cost = selected_flat['area'] * renovation_cost_sq
# –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
expected_sale_price = selected_flat['predicted_price']
# –†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –∑–∞—Ç—Ä–∞—Ç –∏ –ø—Ä–∏–±—ã–ª–∏
total_expenses = selected_flat['price_sq'] + renovation_cost + agent_commission
profit = expected_sale_price - total_expenses

col1, col2, col3, col4 = st.columns(4)
col1.metric("ROI","20%", "4%")
col2.metric("–ò–Ω–¥–µ–∫—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏", "5", "10")
col3.metric("–ò–Ω–¥–µ–∫—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã", "6", "10")
col4.metric("–¢—Ä–µ–Ω–¥", "4%", "100%")

col1, col2, col3, col4 = st.columns(4)
col1.metric(
    "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:",
    f'{selected_flat["price_sq"] * selected_flat["area"]} —Ä—É–±',
    help="–¶–µ–Ω–∞ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏",
    )
col2.metric(
    "–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è:",
    f'{expected_sale_price * selected_flat["area"]} —Ä—É–±',
    help="–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞ –ø–æ –æ—Ü–µ–Ω–∫–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ (–ò–ò)",
    )
# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã
selected_flat = data[data['id'] == selected_flat_id].squeeze()
st.subheader(f'–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ {selected_flat_id}')
st.write(selected_flat)

# –§–ª–∏–ø–ø–∏–Ω–≥-–ø—Ä–æ–µ–∫—Ç
st.markdown("---")

st.subheader(f'–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏')
# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
st.subheader(f'–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {selected_flat["price_sq"]} —Ä—É–±')
st.subheader(f'–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è: {expected_sale_price} —Ä—É–±')
st.subheader(f'–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–µ–º–æ–Ω—Ç: {renovation_cost} —Ä—É–±')
st.subheader(f'–ö–æ–º–∏—Å—Å–∏—è –∞–≥–µ–Ω—Ç–∞: {agent_commission} —Ä—É–±')
st.subheader(f'–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: {total_expenses} —Ä—É–±')
st.subheader(f'–ü—Ä–∏–±—ã–ª—å: {profit} —Ä—É–±')

st.subheader('–ê–Ω–∞–ª–∏–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã')
# –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä
chart, ax = plt.subplots(figsize=(8, 6))

# –§–æ–Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∫–≤–∞—Ä—Ç–∏—Ä
sns.stripplot(
    data=data,
    y='price_sq',
    color='white',
    jitter=0.3,
    size=8,
    linewidth=1,
    edgecolor='gainsboro',
    alpha=0.7
)

# –í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã
sns.stripplot(
    data=data[data['id'] == selected_flat_id],
    y='price_sq',
    color='red',
    size=12,
    linewidth=1,
    edgecolor='black',
    label=f'Selected Flat {selected_flat_id}'
)

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
avg_price_m2 = data['price_sq'].median()
q1_price_m2 = data['price_sq'].quantile(0.25)
q3_price_m2 = data['price_sq'].quantile(0.75)

ax.axhline(y=avg_price_m2, color='#DA70D6', linestyle='--', lw=0.75)
ax.axhline(y=q1_price_m2, color='white', linestyle='--', lw=0.75)
ax.axhline(y=q3_price_m2, color='white', linestyle='--', lw=0.75)

ax.text(1.15, q1_price_m2, 'Q1', ha='center', va='center', color='white', fontsize=8, fontweight='bold')
ax.text(1.35, avg_price_m2, 'Median', ha='center', va='center', color='#DA70D6', fontsize=8, fontweight='bold')
ax.text(1.15, q3_price_m2, 'Q3', ha='center', va='center', color='white', fontsize=8, fontweight='bold')
ax.fill_betweenx([q1_price_m2, q3_price_m2], -2, 1, alpha=0.2, color='gray')
ax.set_xlim(-1, 1)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
ax.set_ylabel('–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä (R$)')
ax.set_title('–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä')
ax.legend()
st.pyplot(chart)

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –≥—Ä–∞—Ñ–∏–∫–æ–º –∏ —Ç–∞–±–ª–∏—Ü–µ–π
st.markdown("---")

# –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 1500 –º–µ—Ç—Ä–æ–≤
st.subheader('–¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 1500 –º–µ—Ç—Ä–æ–≤')
# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 1500 –º–µ—Ç—Ä–æ–≤
competitors_data = filtered_data.copy()
competitors_data['Distance (meters)'] = competitors_data.apply(
    lambda row: geodesic((row['lat'], row['lon']), (selected_flat['lat'], selected_flat['lon'])).meters,
    axis=1
)
competitors_data = competitors_data[competitors_data['Distance (meters)'] <= 1500]

# –í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
competitors_data.loc[competitors_data['id'] == selected_flat_id, 'Selected'] = 'Selected'

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
st.dataframe(competitors_data[['id', 'city', 'price_sq', 'Distance (meters)', 'Selected']].reset_index(drop=True))

# –ö–∞—Ä—Ç–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 1500 –º–µ—Ç—Ä–æ–≤
st.subheader('–ö–∞—Ä—Ç–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 1500 –º–µ—Ç—Ä–æ–≤')
m = folium.Map(location=[selected_flat['lat'], selected_flat['lon']], zoom_start=14, tooltip=True)

# –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –∫–≤–∞—Ä—Ç–∏—Ä –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 1500 –º–µ—Ç—Ä–æ–≤
for index, flat in competitors_data.iterrows():
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã
    marker_color = 'red' if flat['id'] == selected_flat_id else 'blue'
    
    folium.Marker([flat['lat'], flat['lon']],
                  popup=f"{flat['city']}, {flat['price_sq']} —Ä—É–±/–º¬≤",
                  tooltip=f"{flat['city']}, {flat['price_sq']} —Ä—É–±/–º¬≤",
                  icon=folium.Icon(color=marker_color),
                  auto_open=True).add_to(m)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
folium_static(m)
