# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import streamlit as st
from streamlit.logger import get_logger
import pandas as pd

LOGGER = get_logger(__name__)


def run():
    st.set_page_config(
        page_title="Hello",
        page_icon="üëã",
    )


def display_info(info_dict, header):
    st.header(header)
    df = pd.DataFrame(info_dict.items(), columns=["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
    st.table(df)

def calculate_taxes_and_profit(net_profit, renovation_cost, other_expenses):
    taxes_13_percent = net_profit * 0.13
    taxes_6_percent = net_profit * 0.06
    net_profit_after_taxes = net_profit - taxes_13_percent - taxes_6_percent
    return taxes_13_percent, taxes_6_percent, net_profit_after_taxes

def calculate_location_score(location_ratings):
    # –ü—Ä–∏–º–µ—Ä: –°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ü–µ–Ω–æ–∫ –ø–æ —Ä–∞–∑–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
    return sum(location_ratings.values()) / len(location_ratings)

def main():
    st.title("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")

    # –†–∞–∑–¥–µ–ª 1: –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    general_info = {
        "–ê–¥—Ä–µ—Å": "–£–ª–∏—Ü–∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 123, –∫–≤. 456",
        "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏": "01.01.2023",
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –æ–±—â–µ–µ": 1000,
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ –¥–µ–Ω—å": 50,
        "–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏": 2000000,
        "–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏": 2200000,
        "–¶–µ–Ω–∞ –∑–∞ –∫–≤–º": 40000,
        "–ü—Ä–æ–¥–∞–≤–µ—Ü": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω",
        "–í—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ": "10 –º–∏–Ω—É—Ç",
        "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–µ—Ç—Ä–æ": "500 –º–µ—Ç—Ä–æ–≤",
    }
    display_info(general_info, "1. –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

    # –†–∞–∑–¥–µ–ª 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ
    flat_info = {
        "–°–æ—Å—Ç–æ—è–Ω–∏–µ": "–•–æ—Ä–æ—à–µ–µ",
        "–ö–æ–º–Ω–∞—Ç—ã": 2,
        "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å": 60,
        "–ö—É—Ö–Ω—è": 10,
        "–ë–∞–ª–∫–æ–Ω": "–ï—Å—Ç—å",
        "–≠—Ç–∞–∂": 5,
        "–°–µ—Ä–∏—è –¥–æ–º–∞": "–ö–∏—Ä–ø–∏—á–Ω–∞—è",
        "–¢–∏–ø –¥–æ–º–∞": "–ú–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π",
        "–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏": 2000,
        "–ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç": "–î–∞",
    }
    display_info(flat_info, "2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ")

    # –†–∞–∑–¥–µ–ª 3: –°–º–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
    st.header("3. –°–º–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞")
    renovation_cost_per_sqm = st.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä", min_value=0, value=1000)
    total_area = flat_info["–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å"]
    renovation_cost = total_area * renovation_cost_per_sqm
    other_expenses = st.number_input("–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã", min_value=0)
    deal_price = general_info["–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏"]
    net_profit = deal_price - (general_info["–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏"] - st.number_input("–¢–æ—Ä–≥", min_value=0)) - renovation_cost - other_expenses
    taxes_13_percent, taxes_6_percent, net_profit_after_taxes = calculate_taxes_and_profit(net_profit, renovation_cost, other_expenses)

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.subheader("–°–º–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞")
    st.write(f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞: {renovation_cost}")
    st.write(f"–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {other_expenses}")
    st.write(f"–ü—Ä–∏–±—ã–ª—å –¥–æ –Ω–∞–ª–æ–≥–æ–≤: {net_profit}")
    st.write(f"–ù–∞–ª–æ–≥–∏ –ø—Ä–∏ —Å—Ç–∞–≤–∫–µ 13%: {taxes_13_percent}")
    st.write(f"–ù–∞–ª–æ–≥–∏ –ø—Ä–∏ —Å—Ç–∞–≤–∫–µ 6%: {taxes_6_percent}")
    st.write(f"–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_profit_after_taxes}")

    # –†–∞–∑–¥–µ–ª 4: –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
    st.header("4. –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞")
    roi = (net_profit_after_taxes / (renovation_cost + other_expenses)) * 100
    irr = (net_profit_after_taxes / (renovation_cost + other_expenses)) * (12 / st.number_input("–°—Ä–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞ (–≤ –º–µ—Å—è—Ü–∞—Ö)", min_value=1)) * 100
    gap = general_info["–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏"] / general_info["–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏"]
    st.write(f"ROI (—Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π): {roi}%")
    st.write(f"IRR (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –Ω–æ—Ä–º–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏): {irr}%")
    st.write(f"GAP (–ù–∞ —Å–∫–æ–ª—å–∫–æ —Ä–µ–º–æ–Ω—Ç–∞ —É–≤–µ–ª–∏—á–∏—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã): {gap}")

    # –†–∞–∑–¥–µ–ª 5: –û—Ü–µ–Ω–∫–∞ –ª–æ–∫–∞—Ü–∏–∏
    st.header("5. –û—Ü–µ–Ω–∫–∞ –ª–æ–∫–∞—Ü–∏–∏")
    location_ratings = {
        "–ë–ª–∏–∑–æ—Å—Ç—å –∫ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É": st.slider("–û—Ü–µ–Ω–∫–∞ –±–ª–∏–∑–æ—Å—Ç–∏", min_value=1, max_value=10, value=5),
        "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–π–æ–Ω–∞": st.slider("–û—Ü–µ–Ω–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã", min_value=1, max_value=10, value=5),
        # –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ª–æ–∫–∞—Ü–∏–∏
    }
    location_score = calculate_location_score(location_ratings)
    st.write(f"–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ª–æ–∫–∞—Ü–∏–∏: {location_score}")

if __name__ == "__main__":
    main()

    st.sidebar.success("Select a demo above.")



if __name__ == "__main__":
    run()
