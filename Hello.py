# Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import streamlit as st
from streamlit.logger import get_logger
import pandas as pd
import folium
from streamlit_folium import folium_static
from streamlit_folium import st_folium
from geopy.distance import geodesic
import matplotlib.pyplot as plt
import seaborn as sns
from streamlit_extras.metric_cards import style_metric_cards
import streamlit.components.v1 as components


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
st.set_page_config(layout='wide')
LOGGER = get_logger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV___
@st.cache
def load_data():
    data = pd.read_csv('test_flats_data.csv')  # –ó–∞–º–µ–Ω–∏—Ç–µ 'your_data.csv' –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ CSV
    return data
data = load_data()
print(data.columns)
# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.subheader('–†–∞—Å—á–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞')

# –°–∞–π–¥–±–∞—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
selected_city = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥', data['city'].unique())

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É
filtered_data = data[data['city'] == selected_city]

# –°–∞–π–¥–±–∞—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
selected_flat_id = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É', filtered_data['id'])

# –î–æ–ø—É—â–µ–Ω–∏—è
renovation_cost_sq = st.sidebar.number_input('–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä:', 35000 )
# –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –∞–≥–µ–Ω—Ç–∞
agent_commission = st.sidebar.number_input('–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–º–∏—Å—Å–∏–∏ –∞–≥–µ–Ω—Ç–∞:', 100000 )

# –í—ã–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –∏ —Ä–∞–π–æ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
selected_flat = data[data['id'] == selected_flat_id].squeeze()
st.subheader(f'{selected_flat["city"]}')
st.title(f'üè† {selected_flat["street"]}, {selected_flat["address"]}')
#{selected_flat["floor"]} –∫–æ–º.–∫–≤., {selected_flat["city"]}, –ü–ª–æ—â–∞–¥—å: {selected_flat["area"]}
st.write(f'‚ìÇÔ∏è –ú–µ—Ç—Ä–æ: {selected_flat["all_data.geo.undergrounds[0].name"]}, {selected_flat["all_data.geo.undergrounds[0].time"]} –º–∏–Ω.')
st.write(f'{selected_flat["all_data.geo.address[2].title"]}, {selected_flat["all_data.geo.address[1].title"]}')
# –†–∞—Å—á–µ—Ç –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ä–µ–º–æ–Ω—Ç
renovation_cost = selected_flat['area'] * renovation_cost_sq
# –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
expected_sale_price = selected_flat['predicted_price']
# –†–∞—Å—á–µ—Ç –æ–±—â–∏—Ö –∑–∞—Ç—Ä–∞—Ç –∏ –ø—Ä–∏–±—ã–ª–∏
total_expenses = selected_flat['price_sq'] + renovation_cost + agent_commission
profit = expected_sale_price - total_expenses

# components

col1, col2, col3, col4 = st.columns(4)
col1.metric("üîÑ ROI","20%", "4%")
col2.metric("üöå –ò–Ω–¥–µ–∫—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏", "5", "10")
col3.metric("üìç –ò–Ω–¥–µ–∫—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã", "6", "10")
col4.metric("üìä –¢—Ä–µ–Ω–¥", "4%", "100%")
style_metric_cards()


col1, col2, col3, col4 = st.columns(4)
col1.metric(
    "üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:",
    f'{selected_flat["bargainTerms.price"]} —Ä—É–±.',
    help="–¶–µ–Ω–∞ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏",
    )
col2.metric(
    "üí∏ –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è:",
    f'{expected_sale_price * selected_flat["area"]} —Ä—É–±.',
    help="–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞ –ø–æ –æ—Ü–µ–Ω–∫–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ (–ò–ò)",
    )
col3.metric(
    "üí∏ –ü—Ä–∏–±–ª—å:",
    f'{profit} —Ä—É–±.',
    help="–ü—Ä–∏–±–ª—å",
    )



# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
selected_flat = data[data['id'] == selected_flat_id].squeeze()
col1, col2, col3 = st.columns(3)
with col1:
    st.subheader(f'1. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏')
    st.write(f'* –ö–æ–º–Ω–∞—Ç: {selected_flat["rooms"]}')
    st.write(f'* –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: {selected_flat["area"]}')
    st.write(f'* –ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å: {selected_flat["all_data.livingArea"]}')
    st.write(f'* –ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏: {selected_flat["kitchen_area"]}')
    st.write(f'* –≠—Ç–∞–∂: {selected_flat["floor"]} –∏–∑ {selected_flat["house_floors"]}')
    st.write(f'* –°–∞–Ω—É–∑–µ–ª: {selected_flat["bathroom_type"]}')
    st.write(f'* –õ–∏—Ñ—Ç: –ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π {selected_flat["lifts"]} –≥—Ä—É–∑–æ–≤–æ–π {selected_flat["freight_lifts"]} ')
    st.write(f'* –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–º–∞: {selected_flat["house_wall_type"]}')
    st.write(f'* –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: {selected_flat["build_year"]}')
with col2:
    st.subheader(f'2. –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏')
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.write(f'* –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {selected_flat["bargainTerms.price"]} —Ä—É–±.')
    st.write(f'* –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è: {expected_sale_price * selected_flat["area"]} —Ä—É–±.')
    st.write(f'* –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–µ–º–æ–Ω—Ç: {renovation_cost} —Ä—É–±.')
    st.write(f'* –ö–æ–º–∏—Å—Å–∏—è –∞–≥–µ–Ω—Ç–∞: {agent_commission} —Ä—É–±.')
    st.write(f'* –û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã: {total_expenses} —Ä—É–±.')
    st.write(f'* –ü—Ä–∏–±—ã–ª—å: {profit} —Ä—É–±.')

st.subheader(f'3. –ê–Ω–∞–ª–∏–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏')
# –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä

# –í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
selected_flat = data[data['id'] == selected_flat_id].squeeze()

st.markdown("---")

# –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 1500 –º–µ—Ç—Ä–æ–≤
st.subheader('–¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 1500 –º–µ—Ç—Ä–æ–≤')
# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 1500 –º–µ—Ç—Ä–æ–≤
competitors_data = filtered_data.copy()
competitors_data['Distance (meters)'] = competitors_data.apply(
    lambda row: geodesic((row['lat'], row['lon']), (selected_flat['lat'], selected_flat['lon'])).meters,
    axis=1
)
competitors_data = competitors_data[competitors_data['Distance (meters)'] <= 1500]

# –í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
competitors_data.loc[competitors_data['id'] == selected_flat_id, 'Selected'] = 'Selected'
st.dataframe(competitors_data[['id', 'city', 'price_sq', 'Distance (meters)', 'Selected']].reset_index(drop=True))

# –ö–∞—Ä—Ç–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 1500 –º–µ—Ç—Ä–æ–≤
st.subheader('–ö–∞—Ä—Ç–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 1500 –º–µ—Ç—Ä–æ–≤')
m = folium.Map(location=[selected_flat['lat'], selected_flat['lon']], zoom_start=14, tooltip=True)

# –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 1500 –º–µ—Ç—Ä–æ–≤
for index, flat in competitors_data.iterrows():
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    marker_color = 'red' if flat['id'] == selected_flat_id else 'blue'
    
    folium.Marker([flat['lat'], flat['lon']],
                  popup=f"{flat['city']}, {flat['price_sq']} —Ä—É–±/–º¬≤",
                  tooltip=f"{flat['city']}, {flat['price_sq']} —Ä—É–±/–º¬≤",
                  icon=folium.Icon(color=marker_color),
                  auto_open=True).add_to(m)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
folium_static(m, width=1000, height=600)


# –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã
center_location = [selected_flat['lat'], selected_flat['lon']]

# –°–æ–∑–¥–∞–Ω–∏–µ HTML-–∫–æ–¥ –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è Yandex –ö–∞—Ä—Ç—ã
import streamlit as st
import streamlit.components.v1 as components

# Define your Yandex API key
YOUR_APIKEY = "14a66a7c-9302-4fbb-9102-44edd5c98dc2"

# Define the initial location for the map
location_yandex_map = [selected_flat['lat'], selected_flat['lon']]

# Yandex Map Integration
st.subheader('Yandex Map Integration')
# Define the initial location for the map
location_yandex_map = [selected_flat['lat'], selected_flat['lon']]

# HTML code for Yandex Map
yandex_map_html = f"""
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1" />
    <script src="https://api-maps.yandex.ru/2.1/?apikey={YOUR_APIKEY}&lang=en_US" type="text/javascript"></script>
    <style>
      html, body, #app {{
        width: 100%; height: 100%; margin: 0; padding: 0; font-family: Arial, Helvetica, sans-serif;
      }}
      .toolbar {{
        position: absolute; z-index: 1000; top: 0; left: 0; display: flex; align-items: center; padding: 16px;
      }}
      .toolbar a {{
        padding: 16px;
      }}
    </style>
  </head>
  <body>
    <div id="app" style="width: 100%; height: 600px;"></div>
    <script>
      ymaps.ready(init);
      function init() {{
        var map = new ymaps.Map('app', {{
          center: {location_yandex_map},
          zoom: 10
        }});

        // Add a marker for the selected property
        var selectedMarker = new ymaps.Placemark([ {location_yandex_map[0]}, {location_yandex_map[1]} ], {{ balloonContent: 'Selected Property' }});
        map.geoObjects.add(selectedMarker);

        // Add markers for competitors
        var competitorsData = {competitors_data[['lat', 'lon', 'id']].to_json(orient='records', date_format='iso')};
        for (var i = 0; i < competitorsData.length; i++) {{
            var competitorMarker = new ymaps.Placemark(
                [competitorsData[i]['lat'], competitorsData[i]['lon']],
                {{ balloonContent: 'Competitor Property' + competitorsData[i]['id'] }}
            );
            map.geoObjects.add(competitorMarker);
        }}

        // You can add more features and controls to the map here.
      }}
    </script>
  </body>
</html>
"""

# Display the updated map in the Streamlit app
components.html(yandex_map_html, height=600)

